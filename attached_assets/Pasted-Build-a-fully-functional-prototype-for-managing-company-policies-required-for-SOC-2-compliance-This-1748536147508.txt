Build a fully functional prototype for managing company policies required for SOC 2 compliance. This prototype should include:

A PostgreSQL database using Prisma

A Node.js backend (API)

A React frontend (UI)

All components should be integrated and work end-to-end

Once complete, this prototype will be used to create a scalable system design and technical documentation.

üìÅ Folder Structure
bash
Copy
Edit
/project-root
  /backend      ‚Üê Node.js and express.js APIs using Prisma ORM
  /frontend     ‚Üê React  frontend UI
Both backend and frontend should be modular and independently manageable, but fully connected and integrated. API calls from the frontend should hit the backend, which talks to PostgreSQL via Prisma.

üõ† Tech Stack
Backend: Node.js, Express  API Routes

Frontend: React 

Database: PostgreSQL

ORM: Prisma

‚úÖ Features & Functional Requirements (based on the assignment)
1. Policy Management
Multiple policy types (Infosec, Acceptable Use, Crypto, etc.)

Sprinto-owned template policies (used internally to generate defaults)

Support custom customer policies

Policies have multiple versions

Each version has a status: DRAFT, PENDING, APPROVED, DEPRECATED

Approval done by designated approver (e.g., CTO)

Policies may contain configurable JSON inputs (e.g., SLA details)

2. Acknowledgement System
Employees must acknowledge approved policy versions

Acknowledgement required:

Within 30 days of joining

Periodically (e.g. annually)

Manually triggered by admins

Track type of trigger: ONBOARD / PERIODIC / MANUAL

Employees check a simple ‚ÄúI agree‚Äù checkbox

Audit trail of every acknowledgement with timestamps

3. Role-Based Policy Assignment
Employees have one or more Roles

Each role is assigned a subset of active policy versions

UI should allow configuring which roles get which policies

4. Acknowledgement Request Logic
Create acknowledgement requests for:

New hires (auto-triggered)

Periodic (yearly cron job)

Manual admin requests

Must track due dates and check if completed within 30 days

If not completed, escalate to CXO

5. Version Upgrade Workflow
Sprinto can publish updated internal templates

Customers can be notified to upgrade their policies

Older approved policy continues to be in use until new one is approved

6. Optional Re-Acknowledgement
Not required to re-acknowledge for changes, but supported

Admin can trigger re-ack only for changed policies

üß± Prisma Data Model (Database Schema)
Refer to the schema in the previous message ‚Äì include that schema.prisma file in /prisma/schema.prisma.

üåê Backend API Plan (/backend)
POST /companies/:id/policies

POST /policies/:id/versions

POST /versions/:id/approve

POST /roles

POST /roles/:id/assignments

POST /employees

POST /employees/:id/roles

POST /ack-requests

POST /ack-events

GET /ack-requests/:id/status

GET /ack-requests/overdue

POST /alerts/:id/escalate

GET /companies/:id/template-upgrades

üé® Frontend UI Plan (/frontend)
Dashboard

View all policies & versions

See which are approved, pending, draft

Roles Manager

Assign policies to roles

Employee Manager

Create employees, assign roles

Acknowledgement Dashboard

Create and view ack requests

Acknowledge policies as a logged-in employee (for demo)

Alerts

View overdue acks and escalate

Upgrade Prompt

Show upgrade banner if newer Sprinto templates available

üîÑ Workflows & Scheduled Jobs
New Employee: Triggers onboarding ack for assigned policies

Annual Cron Job: Triggers periodic ack for all employees

Manual Trigger: UI button triggers selected ack requests

Alert Generator: Nightly job checks overdue acknowledgements and escalates

üìå Key Requirements to Follow in Prototype
Backend and frontend should be in separate folders

Use PostgreSQL + Prisma

Include full database schema

Provide working UI pages to interact with API

All components must be connected and functional

Keep code simple and modular (this is a prototype)

Future goal: scale with proper documentation and design

